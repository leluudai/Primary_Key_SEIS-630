/* Part C of Exhibit B (Ask professor about looking up contract associated with project) */
SELECT PROJECTNUMBER, PROJECTADDRESS, PROJECTDESCRIPTION FROM PROJECT Where PROJECTNUMBER = 'IL-SJB-335-005';

-- SELECT QUERY Data for EXHIBIT C - Part C -Detailed Pay Scale Breakdown for Regular Hours (Overtime =1.5 X the Basic Rate)
SELECT SKILLCODE, SKILLCLASSIFICATION, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE
    AS Total_Compensation FROM SKILL ORDER BY SKILLID;

-- Exhibit D, Part D
-- 1 employee
-- Each skill
    -- Aggregate total hours
    -- Calculate gross
    -- Calculate total (rate + fringe)

-- Group by skill code
-- TODO: Verify that we can see all other skills codes for the employee
-- TODO: Show other employees. We only have one.
SELECT SSN, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
GROUP BY SSN, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- EXHIBIT E- LILY LANDSCAPING GENERAL EMPLOYEE INFORMATION FORM
-- TODO: Update DOB date formatËš
SELECT SSN, LASTNAME, FIRSTNAME, MI, STREET, CITY, STATE, ZIP, PHONE, DOB, GENDER, MARITALSTATUS, EEOTYPE
FROM EMPLOYEE
WHERE EmployeeID = 1;


--------------------------- START OF SECTION F-----------------------------------------------

-- EXHIBIT F- SAMPLE WEEKLY PAY INFORMATION FORM
SELECT PROJECTNAME, SKILLCLASSIFICATION, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, Sum(TIME_CARD.TOTALTIME) as Total, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on P.PROJECTID = TIME_CARD.PROJECTID
GROUP BY PROJECTNAME, SKILLCLASSIFICATION, BASICHOURLYRATE, FRINGE;

-- GET EVERYTHING THAT IS ACCUMULATES UP TO 40 HOURS DURING THE WEEK
SELECT TIMECARDID, SKILLID, EMPLOYEEID, PROJECTID, STARTTIME, ENDTIME, HOURS,
CASE WHEN HOURS < 40 THEN sum(HOURS)
ELSE 0
end AS HOURS_TOTAL
FROM DETAILED_TIMECARD
group by TIMECARDID, SKILLID, EMPLOYEEID, PROJECTID, STARTTIME, ENDTIME, HOURS;

-- Query return data for Total_Hours for single employee
SELECT PROJECTID, EMPLOYEEID, SKILLID, HOURS,
  SUM(HOURS) OVER (PARTITION BY EMPLOYEEID ORDER BY HOURS
                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Accumulate_Total_Hours
FROM DETAILED_TIMECARD where EMPLOYEEID = 1;

-- Query return data for single employee with Total_Hours break fown by Project Name and Skill Code.
SELECT PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on TIME_CARD.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Create View for Accumulate Total Time Worked for each employee
CREATE VIEW DETAIL_WORK_HOUR  AS Select TIMECARDID, SKILLID, EMPLOYEEID, PROJECTID, STARTTIME, ENDTIME, TO_NUMBER(TO_CHAR(STARTTIME,'HH24'))
    AS START_HOUR, TO_NUMBER(TO_CHAR(ENDTIME,'HH24')) AS END_HOUR, HOURS,
    SUM(HOURS) OVER (PARTITION BY EMPLOYEEID ORDER BY HOURS ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_Hours
FROM DETAILED_TIMECARD ORDER BY TIMECARDID;


--Find total hours for single employee worked
SELECT SUM(SUM(ENDTIME-STARTTIME)*24) AS HOURS
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.
    EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on TIME_CARD.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Find total hours for single employee overtime hours
SELECT SUM(SUM(ENDTIME-STARTTIME)*24) - 40 AS HOURS
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.
    EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on TIME_CARD.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;



----------SECTION FOR REGULAR HOURS--------------------------------

--Table show for regular pay time of 40 hours
SELECT PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE, (BASICHOURLYRATE*1.5) + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE*1.5 + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours <= 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Gross Pay: 1062

-- Total Gross pay for regular hour
SELECT SUM(SUM((ENDTIME-STARTTIME)*24)*(BASICHOURLYRATE*1.5 + FRINGE)) AS GROSSPAY
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.
    EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours <= 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;


----------SECTION FOR OVERTIME HOURS-----------------------
--Table show for over time of > 40 hours
SELECT PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours > 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Gross Pay for Regular Pay using regular time card
SELECT SUM(SUM((ENDTIME-STARTTIME)*24)*(BASICHOURLYRATE + FRINGE)) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on TIME_CARD.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Gross Pay Overtime: $449
--------------------------- END OF SECTION F-----------------------------------------------