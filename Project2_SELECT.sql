--------------------------- START OF SECTION B-----------------------------------------------
/* Part C of Exhibit B (Ask professor about looking up contract associated with project) */
SELECT PROJECTNUMBER, PROJECTADDRESS, PROJECTDESCRIPTION FROM PROJECT Where PROJECTNUMBER = 'IL-SJB-335-005';

/* Part D EXHIBIT B-LILY LANDSCAPINGâ€™S EEOC COMPLIANCE STATEMENT FORM */

---------------This is create view section for part B --------------
CREATE VIEW MINORITIES AS SELECT * FROM EMPLOYEE
WHERE GENDER = 'male' AND EEOTYPE != 5 OR
      Gender = 'female' AND EEOTYPE != 5;

CREATE VIEW NON_MINORITIES AS SELECT * FROM EMPLOYEE
WHERE GENDER = 'male' AND EEOTYPE = 5 OR
      GENDER = 'female' AND EEOTYPE = 5;

CREATE VIEW MINORITY_MALE_HOURS AS SELECT SKILLCODE, SKILLCLASSIFICATION, SUM(TOTALTIME) AS MINORITY_MALE
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND GENDER = 'male'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;

CREATE VIEW MINORITY_FEMALE_HOURS AS SELECT SKILLCODE, SKILLCLASSIFICATION, SUM(TOTALTIME) AS MINORITY_FEMALE
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND GENDER = 'female'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;

CREATE VIEW NON_MINORITY_MALE_HOURS AS SELECT SKILLCODE, SKILLCLASSIFICATION, SUM(TOTALTIME) AS NON_MINORITY_MALE
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN NON_MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND GENDER = 'male'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;

CREATE VIEW NON_MINORITY_FEMALE_HOURS AS SELECT SKILLCODE, SKILLCLASSIFICATION, SUM(TOTALTIME) AS NON_MINORITY_FEMALE
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN NON_MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND GENDER = 'female'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;


---------------------------------------------Create view for Exhibit B - Part D---------------------------
create view Detail_Work_Hour_Break_Down as select MINORITY_MALE_HOURS.SKILLCODE, MINORITY_MALE_HOURS.SKILLCLASSIFICATION, MINORITY_MALE, MINORITY_FEMALE, NON_MINORITY_FEMALE, NON_MINORITY_MALE,
       (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) as Job_Hours,
       ROUND((NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0)) /  (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) * 100 ,1)  as Percent_Minority,
       ROUND((NVL(NON_MINORITY_FEMALE, 0) + NVL(MINORITY_FEMALE, 0)) /  (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) * 100 ,1)  as Percent_Female
from MINORITY_MALE_HOURS
    left outer join  NON_MINORITY_MALE_HOURS NMMH on MINORITY_MALE_HOURS.SKILLCLASSIFICATION = NMMH.SKILLCLASSIFICATION
    left outer join  MINORITY_FEMALE_HOURS MFH on MINORITY_MALE_HOURS.SKILLCLASSIFICATION = MFH.SKILLCLASSIFICATION
    left outer join  NON_MINORITY_FEMALE_HOURS NMFH on MFH.SKILLCLASSIFICATION = NMFH.SKILLCLASSIFICATION;
------------------------------------ End create view section Exhibit B - Part D ------------------------------

-------------------------------------- Select for whole entire table except no Total Hours Row
select MINORITY_MALE_HOURS.SKILLCODE, MINORITY_MALE_HOURS.SKILLCLASSIFICATION, MINORITY_MALE, MINORITY_FEMALE, NON_MINORITY_FEMALE, NON_MINORITY_MALE,
       (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) as Job_Hours,
       ROUND((NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0)) /  (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) * 100 ,1)  as Percent_Minority,
       ROUND((NVL(MINORITY_FEMALE, 0) + NVL(MINORITY_FEMALE, 0)) /  (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) * 100 ,1)  as Percent_Female
from MINORITY_MALE_HOURS
    left outer join  NON_MINORITY_MALE_HOURS NMMH on MINORITY_MALE_HOURS.SKILLCLASSIFICATION = NMMH.SKILLCLASSIFICATION
    left outer join  MINORITY_FEMALE_HOURS MFH on MINORITY_MALE_HOURS.SKILLCLASSIFICATION = MFH.SKILLCLASSIFICATION
    left outer join  NON_MINORITY_FEMALE_HOURS NMFH on MFH.SKILLCLASSIFICATION = NMFH.SKILLCLASSIFICATION;


----------------------------------------This Query for display whole entire table except Skill Classification Column
-- Note:  The last row is the sum of all the above rows combined.
select MINORITY_MALE, MINORITY_FEMALE, NON_MINORITY_MALE, NON_MINORITY_FEMALE, Job_Hours, Percent_Minority, Percent_Female from DETAIL_WORK_HOUR_BREAK_DOWN union
select  SUM(MINORITY_MALE) as Minority_Male, SUM(MINORITY_FEMALE) as Minority_Female, SUM(NON_MINORITY_MALE) as Non_Minority_Male, SUM(NON_MINORITY_FEMALE) as Non_Minority_Female, SUM(Job_Hours) Total_Job_Hours,
       ROUND(((SUM(MINORITY_MALE) + SUM(MINORITY_FEMALE)) /  SUM(Job_Hours) * 100), 1) as Total_Percent_Minority,
       ROUND(((SUM(NON_MINORITY_FEMALE) + SUM(MINORITY_FEMALE)) /  SUM(Job_Hours) * 100), 1) as Total_Female_Percent
from DETAIL_WORK_HOUR_BREAK_DOWN;

--------------------------- END OF SECTION B-----------------------------------------------


--------------------------- START OF SECTION C-----------------------------------------------
-- SELECT QUERY Data for EXHIBIT C - Part C -Detailed Pay Scale Breakdown for Regular Hours (Overtime =1.5 X the Basic Rate)
SELECT SKILLCODE, SKILLCLASSIFICATION, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE
    AS Total_Compensation FROM SKILL ORDER BY SKILLID;

--------------------------- END OF SECTION C-----------------------------------------------


--------------------------- START OF SECTION D-----------------------------------------------

------Exhibit D, Part D
SELECT SSN, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
WHERE EMPLOYEE.SSN = '392224484'
GROUP BY SSN, SKILLCODE, BASICHOURLYRATE, FRINGE;

------Exhibit D, Part E
--(I create a new view because I need the cumulated hours could be added by date order and
-- the data is in one week period which ends on 10 March, 2018 as mentioned by Exhibit D Part A.)

CREATE VIEW DETAIL_WORK_HOUR_PART_D AS Select TIMECARDID, SKILLID, EMPLOYEEID, PROJECTID, STARTTIME, ENDTIME, TO_NUMBER(TO_CHAR(STARTTIME,'HH24'))
    AS START_HOUR, TO_NUMBER(TO_CHAR(ENDTIME,'HH24')) AS END_HOUR, TOTALTIME,
    SUM(TOTALTIME) OVER (PARTITION BY EMPLOYEEID ORDER BY TIMECARDID ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_Hours
FROM TIME_CARD
WHERE (TO_CHAR(STARTTIME,'YYYY/MM/DD') BETWEEN '2018/03/04' AND '2018/03/10')
ORDER BY TIMECARDID;

-- This view for overtime
create view EXHIBIT_D_PART_F_OVERTIME AS SELECT s.SKILLCODE, SUM(t.TOTALTIME) AS OVERTIME
FROM DETAIL_WORK_HOUR_PART_D d
JOIN TIME_CARD t ON t.TIMECARDID = d.TIMECARDID
JOIN EMPLOYEE e ON e.EMPLOYEEID = t.EMPLOYEEID
JOIN SKILL s ON s.SKILLID = d.SKILLID
JOIN PROJECT P on t.PROJECTID = P.PROJECTID
WHERE (P.PROJECTNUMBER= 'IL-SJB-335-005') and e.SSN = '392224484' and d.Total_Hours > 40 and (TO_CHAR(d.STARTTIME, 'DD-MON-YYYY') BETWEEN '04-MAR-2018' AND '10-MAR-2018')
GROUP BY s.SKILLCODE, P.PROJECTID;

-- This view for regular time
create view EXHIBIT_D_PART_F_REGULAR AS SELECT s.SKILLCODE, SUM(t.TOTALTIME) AS REGULAR
FROM DETAIL_WORK_HOUR_PART_D d
JOIN TIME_CARD t ON t.TIMECARDID = d.TIMECARDID
JOIN EMPLOYEE e ON e.EMPLOYEEID = t.EMPLOYEEID
JOIN SKILL s ON s.SKILLID = d.SKILLID
JOIN PROJECT P on t.PROJECTID = P.PROJECTID
WHERE (P.PROJECTNUMBER= 'IL-SJB-335-005') and e.SSN = '392224484' and d.Total_Hours <= 40 and (TO_CHAR(d.STARTTIME, 'DD-MON-YYYY') BETWEEN '04-MAR-2018' AND '10-MAR-2018')
GROUP BY s.SKILLCODE, P.PROJECTID;

-- This is select statement for regular hours and overtime
SELECT EXHIBIT_D_PART_F_REGULAR.SKILLCODE, NVL(OVERTIME, 0) as OVERTIME, NVL(REGULAR, 0) AS REGULAR, SUM(NVL(OVERTIME, 0) + NVL(REGULAR, 0)) as TOTAL from EXHIBIT_D_PART_F_REGULAR full outer join
     EXHIBIT_D_PART_F_OVERTIME on EXHIBIT_D_PART_F_REGULAR.SKILLCODE = EXHIBIT_D_PART_F_OVERTIME.SKILLCODE group by
    EXHIBIT_D_PART_F_REGULAR.SKILLCODE, OVERTIME, REGULAR;


--------------------------- END OF SECTION D-----------------------------------------------


--------------------------- START OF SECTION E-----------------------------------------------

-- EXHIBIT E- LILY LANDSCAPING GENERAL EMPLOYEE INFORMATION FORM
SELECT SSN, LASTNAME, FIRSTNAME, MI, STREET, CITY, STATE, ZIP, PHONE, TO_CHAR(DOB, 'DD MONTH YYYY'), GENDER, MARITALSTATUS, EEOTYPE
FROM EMPLOYEE
WHERE EmployeeID = 1;

--------------------------- END OF SECTION E-----------------------------------------------

--------------------------- START OF SECTION F-----------------------------------------------
-- Create View for Accumulate Total Time Worked for each employee
CREATE VIEW DETAIL_WORK_HOUR AS Select TIMECARDID, SKILLID, EMPLOYEEID, PROJECTID, STARTTIME, ENDTIME, TO_NUMBER(TO_CHAR(STARTTIME,'HH24'))
    AS START_HOUR, TO_NUMBER(TO_CHAR(ENDTIME,'HH24')) AS END_HOUR, TOTALTIME,
    SUM(TOTALTIME) OVER (PARTITION BY EMPLOYEEID
        ORDER BY TOTALTIME ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_Hours
FROM TIME_CARD WHERE (TO_CHAR(STARTTIME,'YYYY/MM/DD') BETWEEN '2020/11/09' AND '2020/11/23') ORDER BY TIMECARDID;

----------SECTION FOR REGULAR HOURS--------------------------------

--Table show for REGULAR PAY time of 40 hours
SELECT PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours <= 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Gross pay for regular hour expected result -- Total Gross Pay: 1062
SELECT SUM(SUM((ENDTIME-STARTTIME)*24)*(BASICHOURLYRATE*1.5 + FRINGE)) AS Total_Regular_Pay
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.
    EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours <= 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Regular Hours SHOULD BE 40
SELECT Total_Hours as Total_Regular_Pay_Hours FROM DETAIL_WORK_HOUR WHERE EMPLOYEEID = 1 AND Total_Hours = 40;

-----------------------------------------SECTION FOR OVERTIME HOURS-----------------------
--Table show for over time of > 40 hours
SELECT PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours > 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Gross Pay for Overtime Pay Expected to be $639.00
SELECT SUM(SUM((ENDTIME-STARTTIME)*24)*(BASICHOURLYRATE *1.5 + FRINGE)) AS Total_Overtime_Pay
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.
    EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours > 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total over time hours expected 23
SELECT SUM(SUM(ENDTIME-STARTTIME)*24) - 40 AS Total_Overtime_Pay_Hours
FROM DETAIL_WORK_HOUR
WHERE (TO_CHAR(STARTTIME,'YYYY/MM/DD') BETWEEN '2020/11/09' AND '2020/11/23') AND EMPLOYEEID = 1 GROUP BY Total_Hours;

--------------------------- END OF SECTION F-----------------------------------------------