--------------------------- START OF SECTION B-----------------------------------------------
/* Part C of Exhibit B (Ask professor about looking up contract associated with project) */
SELECT PROJECTNUMBER, PROJECTADDRESS, PROJECTDESCRIPTION FROM PROJECT Where PROJECTNUMBER = 'IL-SJB-335-005';

/* EXHIBIT B-LILY LANDSCAPING’S EEOC COMPLIANCE STATEMENT FORM Part D */

-- BASED ON ONE WEEK
CREATE VIEW MINORITIES AS SELECT * FROM EMPLOYEE
WHERE GENDER = 'male' AND EEOTYPE != 5 OR
      Gender = 'female' AND EEOTYPE != 5;

CREATE VIEW NON_MINORITIES AS SELECT * FROM EMPLOYEE
WHERE GENDER = 'male' AND EEOTYPE = 5 OR
      GENDER = 'female' AND EEOTYPE = 5;

CREATE VIEW MINORITY_MALE_HOURS AS SELECT SKILLCODE, SKILLCLASSIFICATION, SUM(TOTALTIME) AS MINORITY_MALE
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND GENDER = 'male'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;

CREATE VIEW MINORITY_FEMALE_HOURS AS SELECT SKILLCODE, SKILLCLASSIFICATION, SUM(TOTALTIME) AS MINORITY_FEMALE
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND GENDER = 'female'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;

CREATE VIEW NON_MINORITY_MALE_HOURS AS SELECT SKILLCODE, SKILLCLASSIFICATION, SUM(TOTALTIME) AS NON_MINORITY_MALE
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN NON_MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND GENDER = 'male'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;

CREATE VIEW NON_MINORITY_FEMALE_HOURS AS SELECT SKILLCODE, SKILLCLASSIFICATION, SUM(TOTALTIME) AS NON_MINORITY_FEMALE
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN NON_MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND GENDER = 'female'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;

-- TO BE REMOVED Check with @Guled on this
SELECT SKILLCODE, SKILLCLASSIFICATION
FROM SKILL JOIN TIME_CARD TC on SKILL.SKILLID = TC.SKILLID
JOIN MINORITIES M on TC.EMPLOYEEID = M.EMPLOYEEID
JOIN NON_MINORITIES NM ON TC.EMPLOYEEID = NM.EMPLOYEEID
JOIN PROJECT P on TC.PROJECTID = P.PROJECTID
WHERE P.PROJECTNUMBER = 'IL-SJB-335-005' AND EEOTYPE != 5 AND GENDER != 'male'
GROUP BY SKILLCODE, SKILLCLASSIFICATION;


----------------------------------------This Query for display whole entire table except Skill Classification Column
select MINORITY_MALE, MINORITY_FEMALE, NON_MINORITY_MALE, NON_MINORITY_FEMALE, Job_Hours, Percent_Minority, Percent_Female from DETAIL_WORK_HOUR_BREAK_DOWN union
select  SUM(MINORITY_MALE) as Minority_Male, SUM(MINORITY_FEMALE) as Minority_Female, SUM(NON_MINORITY_MALE) as Non_Minority_Male, SUM(NON_MINORITY_FEMALE) as Non_Minority_Female, SUM(Job_Hours) Total_Job_Hours,
       ROUND(((SUM(MINORITY_MALE) + SUM(MINORITY_FEMALE)) /  SUM(Job_Hours) * 100), 1) as Total_Percent_Minority,
       ROUND(((SUM(NON_MINORITY_FEMALE) + SUM(MINORITY_FEMALE)) /  SUM(Job_Hours) * 100), 1) as Total_Female_Percent
from DETAIL_WORK_HOUR_BREAK_DOWN;

---------------------------------------- Create view query
create view Detail_Work_Hour_Break_Down as select MINORITY_MALE_HOURS.SKILLCODE, MINORITY_MALE_HOURS.SKILLCLASSIFICATION, MINORITY_MALE, MINORITY_FEMALE, NON_MINORITY_FEMALE, NON_MINORITY_MALE,
       (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) as Job_Hours,
       ROUND((NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0)) /  (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) * 100 ,1)  as Percent_Minority,
       ROUND((NVL(NON_MINORITY_FEMALE, 0) + NVL(MINORITY_FEMALE, 0)) /  (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) * 100 ,1)  as Percent_Female
from MINORITY_MALE_HOURS
    left outer join  NON_MINORITY_MALE_HOURS NMMH on MINORITY_MALE_HOURS.SKILLCLASSIFICATION = NMMH.SKILLCLASSIFICATION
    left outer join  MINORITY_FEMALE_HOURS MFH on MINORITY_MALE_HOURS.SKILLCLASSIFICATION = MFH.SKILLCLASSIFICATION
    left outer join  NON_MINORITY_FEMALE_HOURS NMFH on MFH.SKILLCLASSIFICATION = NMFH.SKILLCLASSIFICATION;

-------------------------------------- Select for whole entire table except no Total Hours Row
select MINORITY_MALE_HOURS.SKILLCODE, MINORITY_MALE_HOURS.SKILLCLASSIFICATION, MINORITY_MALE, MINORITY_FEMALE, NON_MINORITY_FEMALE, NON_MINORITY_MALE,
       (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) as Job_Hours,
       ROUND((NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0)) /  (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) * 100 ,1)  as Percent_Minority,
       ROUND((NVL(MINORITY_FEMALE, 0) + NVL(MINORITY_FEMALE, 0)) /  (NVL(MINORITY_MALE, 0) + NVL(MINORITY_FEMALE, 0) + NVL(NON_MINORITY_MALE, 0)+ NVL(NON_MINORITY_FEMALE, 0)) * 100 ,1)  as Percent_Female
from MINORITY_MALE_HOURS
    left outer join  NON_MINORITY_MALE_HOURS NMMH on MINORITY_MALE_HOURS.SKILLCLASSIFICATION = NMMH.SKILLCLASSIFICATION
    left outer join  MINORITY_FEMALE_HOURS MFH on MINORITY_MALE_HOURS.SKILLCLASSIFICATION = MFH.SKILLCLASSIFICATION
    left outer join  NON_MINORITY_FEMALE_HOURS NMFH on MFH.SKILLCLASSIFICATION = NMFH.SKILLCLASSIFICATION;

--------------------------- END OF SECTION B-----------------------------------------------


--------------------------- START OF SECTION C-----------------------------------------------
-- SELECT QUERY Data for EXHIBIT C - Part C -Detailed Pay Scale Breakdown for Regular Hours (Overtime =1.5 X the Basic Rate)
SELECT SKILLCODE, SKILLCLASSIFICATION, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE
    AS Total_Compensation FROM SKILL ORDER BY SKILLID;

--------------------------- END OF SECTION C-----------------------------------------------


--------------------------- START OF SECTION D-----------------------------------------------

-- Exhibit D, Part D
-- 1 employee
-- Each skill
    -- Aggregate total hours
    -- Calculate gross
    -- Calculate total (rate + fringe)

-- Group by skill code
-- TODO: Verify that we can see all other skills codes for the employee
-- TODO: Show other employees. We only have one.
SELECT SSN, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
GROUP BY SSN, SKILLCODE, BASICHOURLYRATE, FRINGE;
--------------------------- END OF SECTION D-----------------------------------------------


--------------------------- START OF SECTION E-----------------------------------------------

-- EXHIBIT E- LILY LANDSCAPING GENERAL EMPLOYEE INFORMATION FORM
-- TODO: Update DOB date format˚
SELECT SSN, LASTNAME, FIRSTNAME, MI, STREET, CITY, STATE, ZIP, PHONE, DOB, GENDER, MARITALSTATUS, EEOTYPE
FROM EMPLOYEE
WHERE EmployeeID = 1;

--------------------------- END OF SECTION E-----------------------------------------------

--------------------------- START OF SECTION F-----------------------------------------------

-- EXHIBIT F- SAMPLE WEEKLY PAY INFORMATION FORM
SELECT PROJECTNAME, SKILLCLASSIFICATION, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, Sum(TIME_CARD.TOTALTIME) as Total, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on P.PROJECTID = TIME_CARD.PROJECTID
GROUP BY PROJECTNAME, SKILLCLASSIFICATION, BASICHOURLYRATE, FRINGE;

-- Query return data for Total_Hours for single employee
SELECT PROJECTID, EMPLOYEEID, SKILLID, TOTALTIME,
  SUM(TOTALTIME) OVER (PARTITION BY EMPLOYEEID ORDER BY TOTALTIME
                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Accumulate_Total_Hours
FROM TIME_CARD where EMPLOYEEID = 1;

-- Query return data for single employee with Total_Hours break fown by Project Name and Skill Code.
SELECT PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on TIME_CARD.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Create View for Accumulate Total Time Worked for each employee
CREATE VIEW DETAIL_WORK_HOUR  AS Select TIMECARDID, SKILLID, EMPLOYEEID, PROJECTID, STARTTIME, ENDTIME, TO_NUMBER(TO_CHAR(STARTTIME,'HH24'))
    AS START_HOUR, TO_NUMBER(TO_CHAR(ENDTIME,'HH24')) AS END_HOUR, TOTALTIME,
    SUM(TOTALTIME) OVER (PARTITION BY EMPLOYEEID ORDER BY TOTALTIME ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_Hours
FROM TIME_CARD ORDER BY TIMECARDID;


--Find total hours for single employee worked
SELECT SUM(SUM(ENDTIME-STARTTIME)*24) AS HOURS
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.
    EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on TIME_CARD.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Find total hours for single employee overtime hours
SELECT SUM(SUM(ENDTIME-STARTTIME)*24) - 40 AS HOURS
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.
    EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on TIME_CARD.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

----------SECTION FOR REGULAR HOURS--------------------------------

--Table show for regular pay time of 40 hours
SELECT PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE, (BASICHOURLYRATE*1.5) + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE*1.5 + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours <= 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Gross Pay: 1062

-- Total Gross pay for regular hour
SELECT SUM(SUM((ENDTIME-STARTTIME)*24)*(BASICHOURLYRATE*1.5 + FRINGE)) AS GROSSPAY
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.
    EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours <= 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;


----------SECTION FOR OVERTIME HOURS-----------------------
--Table show for over time of > 40 hours
SELECT PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE, BASICHOURLYRATE + FRINGE AS TOTAL, SUM((ENDTIME-STARTTIME)*24) AS HOURS, (BASICHOURLYRATE + FRINGE) * SUM((ENDTIME-STARTTIME)*24) AS GROSSPAY
FROM EMPLOYEE
JOIN DETAIL_WORK_HOUR ON EMPLOYEE.EMPLOYEEID = DETAIL_WORK_HOUR.EMPLOYEEID
JOIN SKILL S on S.SKILLID = DETAIL_WORK_HOUR.SKILLID
JOIN PROJECT P on DETAIL_WORK_HOUR.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1 and Total_Hours > 40
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Gross Pay for Regular Pay using regular time card
SELECT SUM(SUM((ENDTIME-STARTTIME)*24)*(BASICHOURLYRATE + FRINGE)) AS GROSSPAY
FROM EMPLOYEE
JOIN TIME_CARD ON EMPLOYEE.EMPLOYEEID = TIME_CARD.EMPLOYEEID
JOIN SKILL S on S.SKILLID = TIME_CARD.SKILLID
JOIN PROJECT P on TIME_CARD.PROJECTID = P.PROJECTID where EMPLOYEE.EMPLOYEEID = 1
GROUP BY PROJECTNAME, SKILLCODE, BASICHOURLYRATE, FRINGE;

-- Total Gross Pay Overtime: $449
--------------------------- END OF SECTION F-----------------------------------------------